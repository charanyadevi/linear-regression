# -*- coding: utf-8 -*-
"""linear regression(ex-2).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NQfqiJI2n6g3M-eV0ecTF9m-Q1KWTsU7
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

df=pd.read_csv('/content/CarPrice_Assignment.csv',index_col='car_ID')

df.head()

df.info()

df.describe()

df.describe().transpose()

df.columns

df.isnull().sum()

#visualization
sns.pairplot(df)

sns.countplot(data=df,x='fueltype')
plt.title('Countplot of Fueltype')

sns.countplot(data=df,x='aspiration')
plt.title('Countplot of Aspiration')

sns.countplot(data=df,x='drivewheel')
plt.title('Countplot of DrivenWheel')

sns.countplot(data=df,x='doornumber')
plt.title('Countplot of Doors')

sns.countplot(data=df,x='enginelocation')
plt.title('Countplot of Engine Location')

sns.countplot(data=df,x='carbody')
plt.title('Countplot of Car Body')

sns.countplot(data=df,x='enginetype')
plt.title('Countplot of Enginetype')

sns.countplot(data=df,x='fuelsystem')
plt.title('Countplot of FuelSystem')

plt.figure(figsize=(8,10))
sns.countplot(data=df,y='enginesize')
plt.title('Countplot of Engine Size')

plt.figure(figsize=(8,10))
sns.countplot(data=df,y='horsepower')
plt.title('Countplot of Horse Power')

plt.figure(figsize=(12,6))
sns.countplot(data=df,x='highwaympg',hue='enginetype')

plt.figure(figsize=(12,6))
sns.barplot(data=df,y='highwaympg',x='enginetype',hue='fueltype')

sns.heatmap(df.corr())

#new data -remove all the columns that we are not going to use in the model.
 df1=df.drop(['symboling','carbody','drivewheel','enginetype','cylindernumber','fuelsystem','CarName'],axis=1)

df1.head()

#Getting Dummies Coloum
gas = pd.get_dummies(df1['fueltype'],drop_first=True)
aspiration = pd.get_dummies(df1['aspiration'],drop_first=True)
doornumber = pd.get_dummies(df1['doornumber'],drop_first=True)
enginelocation = pd.get_dummies(df1['enginelocation'],drop_first=True)

#Remove Original Coloum
df1.drop(['fueltype'],axis=1,inplace=True)
df1.drop(['aspiration'],axis=1,inplace=True)
df1.drop(['doornumber'],axis=1,inplace=True)
df1.drop(['enginelocation'],axis=1,inplace=True)

#Add Dummies Colum in the NewData
df1 = pd.concat([df1,gas,aspiration,doornumber,enginelocation],axis=1)

df1.head()

#training model
X=df1.drop('price',axis=1)
y=df['price']

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.30, random_state=101)

from sklearn.linear_model import LinearRegression

lnrg=LinearRegression()

lnrg.fit(X_train,y_train)

coeff_df = pd.DataFrame(lnrg.coef_,X.columns,columns=['Coefficient'])
coeff_dfcoeff_df = pd.DataFrame(lnrg.coef_,X.columns,columns=['Coefficient'])
coeff_df

pred=lnrg.predict(X_test)
plt.scatter(y_test,pred)

sns.displot((y_test,pred),bins=50,kde=True)

#evaluation metrices
from sklearn.metrics import classification_report,confusion_matrix
from sklearn import metrics
print('MAE:', metrics.mean_absolute_error(y_test, pred))
print('MSE:', metrics.mean_squared_error(y_test, pred))
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, pred)))